#lang racket/base

(require "func.rkt")
(require rackunit)

(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged data -- TYPE-TAG", datum)))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged data -- CONTENTS", datum)))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
        (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
        (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
        (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
        (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
    (lambda (x) (tag x)))
  'done
)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (gcd a b)
    (if (= b 0)
      a
      (gcd b (remainder a b))))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cond 
        ; ((and (below-zero? n) ))
        (else (cons (/ n g) (/ d g)))))
  )
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
        (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
        (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
        (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
        (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
    (lambda (n d) (tag (make-rat n d))))
  'done
)

(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-complex-package)
  (define (real-part z)
    (cond ((rectangular? z)
          (real-part-rectangular (contents z)))
          ((polar? z)
          (real-part-polar (contents z)))
          (else (error "Unknown type -- REAL-PART" z))))
  (define (imag-part z)
    (cond ((rectangular? z)
          (imag-part-rectangular (contents z)))
          ((polar? z)
          (imag-part-polar (contents z)))
          (else (error "Unknown type -- IMAG-PART" z))))
  (define (magnitude z)
    (cond ((rectangular? z)
          (magnitude-rectangular (contents z)))
          ((polar? z)
          (magnitude-polar (contents z)))
          (else (error "Unknown type -- MAGNITUDE" z))))
  (define (angle z)
    (cond ((rectangular? z)
          (angle-rectangular (contents z)))
          ((polar? z)
          (angle-polar (contents z)))
          (else (error "Unknown type -- ANGLE" z))))
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                        (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                        (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (+ (magnitude z1) (magnitude z2))
                      (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                      (- (angle z1) (angle z2))))

  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
        (lambda (x y) (tag (add-complex x y))))
  (put 'sub '(complex complex)
        (lambda (x y) (tag (sub-complex x y))))
  (put 'mul '(complex complex)
        (lambda (x y) (tag (mul-complex x y))))
  (put 'div '(complex complex)
        (lambda (x y) (tag (div-complex x y))))
  (put 'make-from-real-imag 'complex
        (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
        (lambda (r a) (tag (make-from-mag-ang r a))))

  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  'done
)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))